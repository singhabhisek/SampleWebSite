

To call the provided endpoints in Postman, you need to set up the request headers, authorization (if applicable), and body content depending on the API type. Below are the steps and configurations to call each of the mentioned endpoints in Postman:

1. /customer/details (JSON Request)
This endpoint expects a JSON request with customer details and requires authorization in the form of headers (e.g., an API key or token).

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/customer/details
Headers:
Authorization: Add your token or API key here (for example: Bearer <your_token>).
Content-Type: application/json
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "CustomerID": "C001",
  "FirstName": "John",
  "LastName": "Doe"
}
Response: A JSON object with customer details or an error if not found.
2. /customer/details/xml (XML Request)
This endpoint expects an XML request and returns the customer details in XML format.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/customer/details/xml
Headers:
Authorization: Add your token or API key here.
Content-Type: application/xml
Body:
raw (select XML format) and use the following sample XML:
xml
Copy code
<Request>
  <CustomerID>C001</CustomerID>
  <FirstName>John</FirstName>
  <LastName>Doe</LastName>
</Request>
Response: XML response with customer details or an error message.
3. /accounts/details (JSON Request)
This endpoint returns account details in JSON format based on the customer ID.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/accounts/details
Headers:
Authorization: Add your token or API key here.
Content-Type: application/json
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "CustomerID": "C001"
}
Response: A JSON object with account details or an error if customer ID is not found.
4. /accounts/details/xml (XML Request)
This endpoint works the same way as /accounts/details, but it expects XML input and returns an XML response.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/accounts/details/xml
Headers:
Authorization: Add your token or API key here.
Content-Type: application/xml
Body:
raw (select XML format) and use the following sample XML:
xml
Copy code
<Request>
  <CustomerID>C001</CustomerID>
</Request>
Response: An XML response with account details.
5. /transactions/history (JSON Request)
This endpoint returns the transaction history of a specific account.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/transactions/history
Headers:
Authorization: Add your token or API key here.
Content-Type: application/json
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "AccountNumber": "A123"
}
Response: JSON response with transaction history or an error if the account is not found.
6. /location/lookup (GET Request)
This endpoint retrieves location information based on a ZipCode.

Steps to Call the Endpoint in Postman:
Method: GET
URL: http://localhost:5000/location/lookup?ZipCode=<zipcode>
Headers:
Authorization: Add your token or API key here.
Query Params:
ZipCode: Add the zip code you're looking for (e.g., 94103).
Response: JSON response with location data or an error if not found.
7. /customer/financial_summary (JSON Request)
This endpoint returns a financial summary for a customer.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/customer/financial_summary
Headers:
Authorization: Add your token or API key here.
Content-Type: application/json
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "CustomerID": "C001"
}
Response: A JSON object with the financial summary for the customer.
8. /customer/consolidated_financial_summary (JSON Request)
This endpoint provides a consolidated financial summary, including transactions.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/customer/consolidated_financial_summary
Headers:
Authorization: Add your token or API key here.
Content-Type: application/json
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "CustomerID": "C001"
}
Response: A JSON object with the consolidated financial summary.
9. /customer/consolidated_financial_summary/xml (XML Request)
This endpoint provides the consolidated financial summary in XML format.

Steps to Call the Endpoint in Postman:
Method: POST
URL: http://localhost:5000/customer/consolidated_financial_summary/xml
Headers:
Authorization: Add your token or API key here.
Content-Type: application/json (since the request body is still in JSON format).
Body:
raw (select JSON format) and use the following sample JSON:
json
Copy code
{
  "CustomerID": "C001"
}
Response: XML response with the consolidated financial summary.
Authorization Headers for All Endpoints:
For most endpoints, you will need to include an Authorization header to authenticate the request. Hereâ€™s how you can set it up in Postman:

Go to the Headers tab in Postman.
Add a new key called Authorization.
Set the value to Bearer <your_token>, replacing <your_token> with your actual authentication token.
Alternatively, if using an API key, you can set the header to something like:

Authorization: API-Key <your_api_key>


====================




SEARCH_RESULTS = {
    "TV": [
        {"id": "P001", "name": "Samsung 32 inch Smart TV"},
        {"id": "P002", "name": "LG OLED 55 inch TV"},
        {"id": "P003", "name": "Sony Bravia 50 inch TV"},
        {"id": "P004", "name": "Panasonic 43 inch Smart TV"},
        {"id": "P005", "name": "TCL 40 inch Full HD TV"}
    ],
    "Mobile": [
        {"id": "P101", "name": "iPhone 14 Pro Max"},
        {"id": "P102", "name": "Samsung Galaxy S23 Ultra"},
        {"id": "P103", "name": "OnePlus Nord 3"},
        {"id": "P104", "name": "Google Pixel 8"},
        {"id": "P105", "name": "Xiaomi Mi 13"}
    ],
    "Washing Machine": [
        {"id": "P201", "name": "Whirlpool 7kg Fully Automatic"},
        {"id": "P202", "name": "LG 8kg Front Load"},
        {"id": "P203", "name": "Samsung 6.5kg Top Load"}
    ],
    "Laptop": [
        {"id": "P301", "name": "Dell XPS 13"},
        {"id": "P302", "name": "MacBook Pro 16-inch"},
        {"id": "P303", "name": "Alienware m15 R6"}
    ],
    "Headphone": [
        {"id": "P401", "name": "Sony WH-1000XM5"},
        {"id": "P402", "name": "Bose QuietComfort 45"},
        {"id": "P403", "name": "Apple AirPods Max"}
    ],
    "Smartwatch": [
        {"id": "P501", "name": "iWatch 15 Pro"},
        {"id": "P502", "name": "Samsung Watch Z Fold 5"}
    ]
}




@app.route('/search', methods=['GET', 'POST'])
def search():
    # Ensure user is logged in
    if 'session_id' not in session or 'username' not in session:
        flash('You need to log in first.')
        return redirect(url_for('login'))

    # Get the logged-in user's allowed product categories
    username = session['username']
    user_products = USERS[username]['products']

    # Filter products by allowed categories
    filtered_products = {category: SEARCH_RESULTS[category] for category in user_products}

    return render_template('search.html', products=filtered_products)



@app.route('/search_results', methods=['POST'])
def search_results():
    # Ensure user is logged in
    if 'session_id' not in session:
        flash('You need to log in first.')
        return redirect(url_for('login'))

    # Handle search
    category = request.form.get('category')
    query = request.form.get('query', '').lower()
    results = SEARCH_RESULTS.get(category, [])

    # Filter results by query
    if query:
        results = [item for item in results if query in item['name'].lower()]

    return render_template('search_results.html', results=results)



<!DOCTYPE html>
<html>
<head>
    <title>Search</title>
    <style>
        /* Add styles for better appearance */
    </style>
</head>
<body>
    <h1>Search Page</h1>
    <form method="POST" action="/search_results">
        <label for="category">Category:</label>
        <select id="category" name="category">
            {% for category, items in products.items() %}
                <optgroup label="{{ category }}">
                    {% for item in items %}
                        <option value="{{ category }}">{{ item['id'] }} - {{ item['name'] }}</option>
                    {% endfor %}
                </optgroup>
            {% endfor %}
        </select>
        <label for="query">Free Search:</label>
        <input type="text" id="query" name="query" placeholder="Type to search...">
        <button type="submit">Search</button>
    </form>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
    <title>Search</title>
    <style>
        /* Add styles for better appearance */
    </style>
</head>
<body>
    <h1>Search Page</h1>
    <form method="POST" action="/search_results">
        <label for="category">Category:</label>
        <select id="category" name="category">
            {% for category, items in products.items() %}
                <optgroup label="{{ category }}">
                    {% for item in items %}
                        <option value="{{ category }}">{{ item['id'] }} - {{ item['name'] }}</option>
                    {% endfor %}
                </optgroup>
            {% endfor %}
        </select>
        <label for="query">Free Search:</label>
        <input type="text" id="query" name="query" placeholder="Type to search...">
        <button type="submit">Search</button>
    </form>
</body>
</html>


@app.route('/cart', methods=['GET', 'POST'])
def cart():
    if 'session_id' not in session:
        flash('You need to log in first.')
        return redirect(url_for('login'))

    if request.method == 'POST':
        # Remove item by index
        index = int(request.form.get('index'))
        cart = session.get('cart', [])
        if 0 <= index < len(cart):
            cart.pop(index)
        session['cart'] = cart

    return render_template('cart.html', cart=session.get('cart', []))


<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
    <style>
        /* Add styles for better appearance */
    </style>
</head>
<body>
    <h1>Your Cart</h1>
    {% if cart %}
        <table border="1">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for index, item in enumerate(cart) %}
                    <tr>
                        <td>{{ index + 1 }}</td>
                        <td>{{ item['id'] }}</td>
                        <td>{{ item['name'] }}</td>
                        <td>
                            <form method="POST">
                                <input type="hidden" name="index" value="{{ index }}">
                                <button type="submit">Remove</button>
                            </form>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No items in the cart.</p>
    {% endif %}
</body>
</html>




=======================


from flask import Flask, render_template, request, redirect, url_for, session, flash
import random
import uuid
from flask import Flask, request, jsonify, make_response
from xml.etree.ElementTree import Element, tostring, fromstring, SubElement

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Replace with a strong secret key

# Dummy credentials
USERNAME = "admin"
PASSWORD = "password"

# Dummy data for search results
SEARCH_RESULTS = {
    "TV": [
        "Samsung 32 inch Smart TV",
        "LG OLED 55 inch TV",
        "Sony Bravia 50 inch TV",
        "Panasonic 43 inch Smart TV",
        "TCL 40 inch Full HD TV",
        "Vizio 60 inch 4K TV",
        "Sharp Aquos 50 inch TV",
        "Philips 55 inch Smart TV",
        "Hisense 65 inch TV",
        "RCA 32 inch HD TV",
        "Insignia 39 inch TV",
        "Toshiba Fire TV 43 inch"
    ],
    "Mobile": [
        "iPhone 14 Pro Max",
        "Samsung Galaxy S23 Ultra",
        "OnePlus Nord 3",
        "Google Pixel 8",
        "Xiaomi Mi 13",
        "Oppo Reno 10 Pro",
        "Vivo X80 Pro",
        "Motorola Edge 40",
        "Realme GT 3",
        "Asus ROG Phone 7",
        "Nokia XR20",
        "Sony Xperia 1 IV"
    ],
    "Washing Machine": [
        "Whirlpool 7kg Fully Automatic",
        "LG 8kg Front Load",
        "Samsung 6.5kg Top Load",
        "Bosch 7kg Front Load",
        "IFB 6kg Front Load",
        "Haier 6.2kg Semi-Automatic",
        "Miele 9kg Premium Washer"
    ],
    "Laptop": [
        "Dell XPS 13",
        "MacBook Pro 16-inch",
        "Alienware m15 R6"
    ],
    "Headphone": [
        "Sony WH-1000XM5",
        "Bose QuietComfort 45",
        "Apple AirPods Max",
        "Sennheiser Momentum 4",
        "Jabra Elite 85h",
        "Beats Studio 3",
        "Skullcandy Crusher ANC",
        "Bowers & Wilkins PX7",
        "Audio-Technica ATH-M50xBT",
        "Philips PH805",
        "AKG N700NC M2",
        "JBL Live 660NC"
    ],
    "Smartwatch": [
        "iWatch 15 Pro",
        "Samsung Watch Z Fold 5",
        "OnePlus Watch 12",
        "Google Watch Fold"
    ]
}

#
# # Static employee data
# EMPLOYEE_DATA = [
#     {"employeeID": 101, "firstName": "John", "lastName": "Doe", "homePhone": "1234567890", "officePhone": "9876543210", "address": "123 Elm Street"},
#     {"employeeID": 102, "firstName": "Jane", "lastName": "Smith", "homePhone": None, "officePhone": "2345678901", "address": "456 Oak Avenue"},
#     {"employeeID": 103, "firstName": "Alice", "lastName": "Brown", "homePhone": "3456789012", "officePhone": None, "address": "789 Pine Lane"},
#     {"employeeID": 104, "firstName": "Bob", "lastName": "Johnson", "homePhone": "4567890123", "officePhone": "5678901234", "address": "135 Cedar Blvd"},
#     {"employeeID": 105, "firstName": "Charlie", "lastName": "Davis", "homePhone": "5678901234", "officePhone": None, "address": "246 Maple Court"},
#     {"employeeID": 106, "firstName": "Diana", "lastName": "Evans", "homePhone": None, "officePhone": "6789012345", "address": "357 Birch Drive"},
#     {"employeeID": 107, "firstName": "Eve", "lastName": "Williams", "homePhone": "6789012345", "officePhone": "7890123456", "address": "468 Palm Street"},
#     {"employeeID": 108, "firstName": "Frank", "lastName": "Taylor", "homePhone": "7890123456", "officePhone": None, "address": "579 Redwood Lane"},
#     {"employeeID": 109, "firstName": "Grace", "lastName": "Harris", "homePhone": None, "officePhone": "8901234567", "address": "680 Sequoia Way"},
#     {"employeeID": 110, "firstName": "Henry", "lastName": "Clark", "homePhone": "8901234567", "officePhone": "9012345678", "address": "791 Spruce Drive"}
# ]
#
# EMPLOYMENT_DETAILS = {
#     101: {"departmentName": "Engineering", "companyName": "TechCorp"},
#     102: {"departmentName": "Marketing", "companyName": "Brand Inc."},
#     103: {"departmentName": "HR", "companyName": "PeopleFirst"},
#     104: {"departmentName": "Finance", "companyName": "MoneyMatters"},
#     105: {"departmentName": "Sales", "companyName": "SalesForce"},
#     106: {"departmentName": "R&D", "companyName": "InnovateCo"},
#     107: {"departmentName": "IT", "companyName": "TechSupport"},
#     108: {"departmentName": "Operations", "companyName": "OperateNow"},
#     109: {"departmentName": "Logistics", "companyName": "ShipQuick"},
#     110: {"departmentName": "Admin", "companyName": "OfficeWorks"}
# }
#
#
# # Utility function for XML error response
# def generate_xml_error(error_code, error_desc, first_name=None, last_name=None):
#     root = Element('ErrorResponse')
#     error_code_elem = Element('errorCode')
#     error_code_elem.text = str(error_code)
#     error_desc_elem = Element('errorDescription')
#     error_desc_elem.text = error_desc
#
#     root.append(error_code_elem)
#     root.append(error_desc_elem)
#
#     if first_name:
#         first_name_elem = Element('firstName')
#         first_name_elem.text = first_name
#         root.append(first_name_elem)
#
#     if last_name:
#         last_name_elem = Element('lastName')
#         last_name_elem.text = last_name
#         root.append(last_name_elem)
#
#     response = make_response(tostring(root), error_code)
#     response.headers['Content-Type'] = 'application/xml'
#     return response
#
# @app.route('/api/employee_info', methods=['POST'])
# def employee_info():
#     # Check for SOAPAction header
#     if 'SOAPAction' not in request.headers:
#         return generate_xml_error(403, "Forbidden: Missing SOAPAction header.")
#
#     # Parse XML input
#     if request.content_type != 'application/xml':
#         return generate_xml_error(400, "Invalid content type. Please provide XML input.")
#
#     xml_data = request.data
#     try:
#         # Parse input XML
#         from xml.etree.ElementTree import fromstring
#         input_data = fromstring(xml_data)
#         first_name = input_data.find('firstName').text
#         last_name = input_data.find('lastName').text
#
#         # Search for the employee
#         employee = next((emp for emp in EMPLOYEE_DATA if emp["firstName"] == first_name and emp["lastName"] == last_name), None)
#         if not employee:
#             return generate_xml_error(404, "Employee not found.", first_name, last_name)
#
#         # Build XML response
#         root = Element('EmployeeDetails')
#
#         # Add basic employee fields
#         for key in ['employeeID', 'firstName', 'lastName', 'address']:
#             child = Element(key)
#             child.text = str(employee[key]) if employee[key] else "N/A"
#             root.append(child)
#
#         # Add phone numbers as nested XML
#         phone_numbers = Element('phoneNumbers')
#         home_phone = Element('homePhone')
#         home_phone.text = employee['homePhone'] if employee['homePhone'] else "N/A"
#         office_phone = Element('officePhone')
#         office_phone.text = employee['officePhone'] if employee['officePhone'] else "N/A"
#
#         phone_numbers.append(home_phone)
#         phone_numbers.append(office_phone)
#         root.append(phone_numbers)
#
#         # Generate response
#         response = make_response(tostring(root), 200)
#         response.headers['Content-Type'] = 'application/xml'
#         return response
#
#     except Exception as e:
#         return generate_xml_error(500, f"Error processing request: {str(e)}")
#
#
# # API 2: Get employment details based on employeeID
# @app.route('/api/employment_details', methods=['POST'])
# def employment_details():
#     # Check for APIAuth header
#     if 'APIAuth' not in request.headers:
#         return make_response(jsonify({"error": "Forbidden: Missing APIAuth header."}), 403)
#
#     try:
#         data = request.get_json()
#         if not data or 'employeeID' not in data:
#             return jsonify({"error": "Invalid request. Please provide employeeID."}), 400
#
#         employee_id = data['employeeID']
#         # Search for employment details
#         details = EMPLOYMENT_DETAILS.get(employee_id)
#         if not details:
#             return jsonify({"error": "Employee ID not found"}), 404
#
#         # Return JSON response
#         return jsonify({"status_code": 200, "details": details}), 200
#
#     except Exception as e:
#         return jsonify({"error": f"Error processing request: {str(e)}"}), 500


#Employee Data

EMPLOYEE_DATA = [
    {"employeeID": 1, "firstName": "John", "lastName": "Doe", "homePhone": "1234567890",
     "officePhone": "9876543210", "address": "123 Elm Street"},
    {"employeeID": 2, "firstName": "Jane", "lastName": "Smith", "homePhone": None,
     "officePhone": "9876543201", "address": "456 Oak Avenue"},
    {"employeeID": 3, "firstName": "Alice", "lastName": "Johnson", "homePhone": "5678901234",
     "officePhone": None, "address": "789 Maple Lane"},
    {"employeeID": 4, "firstName": "Bob", "lastName": "Brown", "homePhone": "1238904567",
     "officePhone": "8901234567", "address": "654 Pine Road"},
    {"employeeID": 5, "firstName": "Eve", "lastName": "Davis", "homePhone": None,
     "officePhone": "5678901234", "address": "321 Cedar Drive"},
    # Add more records until 50
]

for i in range(6, 51):
    EMPLOYEE_DATA.append({
        "employeeID": i,
        "firstName": f"FirstName{i}",
        "lastName": f"LastName{i}",
        "homePhone": f"12345{i % 10}890" if i % 3 == 0 else None,
        "officePhone": f"89012{i % 10}345" if i % 2 == 0 else None,
        "address": f"{i} Street Name"
    })

#
# #Employment Details
# EMPLOYMENT_DETAILS = {
#     1: {"departmentName": "IT", "companyName": "TechCorp", "departmentID": 101},
#     2: {"departmentName": "HR", "companyName": "TechCorp", "departmentID": 102},
#     3: {"departmentName": "Finance", "companyName": "TechCorp", "departmentID": 103},
#     4: {"departmentName": "Marketing", "companyName": "TechCorp", "departmentID": 104},
#     5: {"departmentName": "Sales", "companyName": "TechCorp", "departmentID": 105},
#     6: {"departmentName": "Support", "companyName": "TechCorp", "departmentID": 106},
#     7: {"departmentName": "Development", "companyName": "TechCorp", "departmentID": 107},
#     8: {"departmentName": "Operations", "companyName": "TechCorp", "departmentID": 108},
#     9: {"departmentName": "Testing", "companyName": "TechCorp", "departmentID": 109},
#     10: {"departmentName": "Analytics", "companyName": "TechCorp", "departmentID": 110}
# }
#
# # Fill the remaining records
# for i in range(11, 51):
#     EMPLOYMENT_DETAILS[i] = {
#         "departmentName": f"Dept{i % 10 + 1}",
#         "companyName": "TechCorp",
#         "departmentID": 100 + (i % 10 + 1)
#     }
#
# #Accounts Data
#
# ACCOUNTS = {
#     1: [
#         {"type": "Savings", "accountNumber": "1000012345"},
#         {"type": "Credit Card", "accountNumber": "2000012345"},
#         {"type": "Loan", "accountNumber": "3000012345"}
#     ],
#     2: [
#         {"type": "Savings", "accountNumber": "1000023456"},
#         {"type": "Loan", "accountNumber": "3000023456"}
#     ],
#     3: [
#         {"type": "Credit Card", "accountNumber": "2000034567"}
#     ],
#     4: [
#         {"type": "Savings", "accountNumber": "1000045678"},
#         {"type": "Loan", "accountNumber": "3000045678"},
#         {"type": "Credit Card", "accountNumber": "2000045678"}
#     ],
#     5: [
#         {"type": "Loan", "accountNumber": "3000056789"}
#     ]
# }
#
# # Fill the remaining records
# for i in range(6, 51):
#     account_count = random.randint(3, 7)
#     ACCOUNTS[i] = [
#         {"type": random.choice(["Savings", "Credit Card", "Loan"]),
#          "accountNumber": f"{random.randint(10000000, 99999999)}"}
#         for _ in range(account_count)
#     ]
#

# Static Employee List
# Static Employee List with updated IDs
EMPLOYEE_DATA = [
    {"employeeID": "E001", "firstName": "John", "lastName": "Doe", "homePhone": "1234567890", "officePhone": "8901234567", "address": "101 Elm Street"},
    {"employeeID": "E002", "firstName": "Jane", "lastName": "Smith", "homePhone": "1234567891", "officePhone": "8901234568", "address": "102 Oak Avenue"},
    {"employeeID": "E003", "firstName": "Alice", "lastName": "Johnson", "homePhone": None, "officePhone": "8901234569", "address": "103 Pine Lane"},
    {"employeeID": "E004", "firstName": "Bob", "lastName": "Brown", "homePhone": "1234567892", "officePhone": None, "address": "104 Maple Road"},
    {"employeeID": "E005", "firstName": "Eve", "lastName": "Taylor", "homePhone": None, "officePhone": "8901234570", "address": "105 Cedar Drive"},
    {"employeeID": "E006", "firstName": "Michael", "lastName": "Anderson", "homePhone": "1234567893", "officePhone": "8901234571", "address": "106 Birch Boulevard"},
    {"employeeID": "E007", "firstName": "Sarah", "lastName": "Thomas", "homePhone": None, "officePhone": "8901234572", "address": "107 Spruce Path"},
    {"employeeID": "E008", "firstName": "James", "lastName": "Jackson", "homePhone": "1234567894", "officePhone": None, "address": "108 Willow Way"},
    {"employeeID": "E009", "firstName": "Emma", "lastName": "White", "homePhone": None, "officePhone": "8901234573", "address": "109 Aspen Terrace"},
    {"employeeID": "E010", "firstName": "Liam", "lastName": "Harris", "homePhone": "1234567895", "officePhone": "8901234574", "address": "110 Redwood Court"},
    {"employeeID": "E011", "firstName": "Olivia", "lastName": "Martin", "homePhone": None, "officePhone": "8901234575", "address": "111 Cypress Plaza"},
    {"employeeID": "E012", "firstName": "Noah", "lastName": "Thompson", "homePhone": "1234567896", "officePhone": None, "address": "112 Sycamore Lane"},
    {"employeeID": "E013", "firstName": "Sophia", "lastName": "Garcia", "homePhone": "1234567897", "officePhone": "8901234576", "address": "113 Poplar Park"},
    {"employeeID": "E014", "firstName": "Mason", "lastName": "Martinez", "homePhone": None, "officePhone": "8901234577", "address": "114 Dogwood Avenue"},
    {"employeeID": "E015", "firstName": "Isabella", "lastName": "Robinson", "homePhone": "1234567898", "officePhone": None, "address": "115 Magnolia Circle"},
    {"employeeID": "E016", "firstName": "Lucas", "lastName": "Clark", "homePhone": None, "officePhone": "8901234578", "address": "116 Beechwood Lane"},
    {"employeeID": "E017", "firstName": "Mia", "lastName": "Rodriguez", "homePhone": "1234567899", "officePhone": None, "address": "117 Chestnut Way"},
    {"employeeID": "E018", "firstName": "Ethan", "lastName": "Lewis", "homePhone": "1234567800", "officePhone": "8901234579", "address": "118 Alder Boulevard"},
    {"employeeID": "E019", "firstName": "Charlotte", "lastName": "Lee", "homePhone": None, "officePhone": "8901234580", "address": "119 Hazel Drive"},
    {"employeeID": "E020", "firstName": "Logan", "lastName": "Walker", "homePhone": "1234567801", "officePhone": None, "address": "120 Hawthorn Court"},
]

# Static Department List
DEPARTMENTS = [
    {"departmentID": "D001", "departmentName": "IT"},
    {"departmentID": "D002", "departmentName": "HR"},
    {"departmentID": "D003", "departmentName": "Finance"},
    {"departmentID": "D004", "departmentName": "Operations"}
]

# Static Mapping of Employees to Departments
EMPLOYMENT_DETAILS = {
    "E001": {"departmentID": "D001", "departmentName": "IT"},
    "E002": {"departmentID": "D002", "departmentName": "HR"},
    "E003": {"departmentID": "D003", "departmentName": "Finance"},
    "E004": {"departmentID": "D004", "departmentName": "Operations"},
    "E005": {"departmentID": "D001", "departmentName": "IT"},
    "E006": {"departmentID": "D002", "departmentName": "HR"},
    "E007": {"departmentID": "D003", "departmentName": "Finance"},
    "E008": {"departmentID": "D004", "departmentName": "Operations"},
    "E009": {"departmentID": "D001", "departmentName": "IT"},
    "E010": {"departmentID": "D002", "departmentName": "HR"},
    "E011": {"departmentID": "D003", "departmentName": "Finance"},
    "E012": {"departmentID": "D004", "departmentName": "Operations"},
    "E013": {"departmentID": "D001", "departmentName": "IT"},
    "E014": {"departmentID": "D002", "departmentName": "HR"},
    "E015": {"departmentID": "D003", "departmentName": "Finance"},
    "E016": {"departmentID": "D004", "departmentName": "Operations"},
    "E017": {"departmentID": "D001", "departmentName": "IT"},
    "E018": {"departmentID": "D002", "departmentName": "HR"},
    "E019": {"departmentID": "D003", "departmentName": "Finance"},
    "E020": {"departmentID": "D004", "departmentName": "Operations"},
}
COMPANIES = [
    "TechCorp", "InnovaSoft", "SkyHigh Enterprises"
]

# Map each employee to a department and a company (cyclic assignment)
EMPLOYMENT_DETAILS = {}
for i, employee in enumerate(EMPLOYEE_DATA):
    department = DEPARTMENTS[i % len(DEPARTMENTS)]
    company = COMPANIES[i % len(COMPANIES)]
    EMPLOYMENT_DETAILS[employee["employeeID"]] = {
        "departmentID": department["departmentID"],
        "departmentName": department["departmentName"],
        "companyName": company
    }

# Static Account Data
ACCOUNTS = {}
for employee in EMPLOYEE_DATA:
    employee_id = employee["employeeID"]
    account_count = random.randint(3, 7)
    ACCOUNTS[employee_id] = [
        {"type": random.choice(["Savings", "Credit Card", "Loan"]),
         "accountNumber": f"{random.randint(1000000000, 9999999999)}"}
        for _ in range(account_count)
    ]



@app.route('/api/employee_info', methods=['POST'])
def employee_info():
    if 'SOAPAction' not in request.headers:
        return make_response("Forbidden: Missing SOAPAction header.", 403)

    if request.content_type != 'application/xml':
        return make_response("Invalid content type. Please provide XML input.", 400)

    xml_data = request.data
    try:
        input_data = fromstring(xml_data)
        first_name = input_data.find('firstName').text
        last_name = input_data.find('lastName').text

        # Search for the employee
        employee = next((emp for emp in EMPLOYEE_DATA if emp["firstName"] == first_name and emp["lastName"] == last_name), None)
        if not employee:
            return make_response("Employee not found.", 404)

        # Build XML response
        root = Element('EmployeeDetails')

        # Add employeeID
        employee_id_element = Element('employeeID')
        employee_id_data = [
            {"type": "Current", "ID": employee["employeeID"]},
            {"type": "Previous", "ID": employee["employeeID"] + 100}
        ]
        random.shuffle(employee_id_data)
        for id_data in employee_id_data:
            type_elem = SubElement(employee_id_element, 'type')
            type_elem.text = id_data["type"]
            id_elem = SubElement(employee_id_element, 'ID')
            id_elem.text = str(id_data["ID"])
        root.append(employee_id_element)

        # Add phone numbers
        phone_element = Element('Phone')
        phone_data = [
            {"type": "Home", "PhoneNumber": employee["homePhone"]},
            {"type": "Office", "PhoneNumber": employee["officePhone"]}
        ]
        phone_data = [entry for entry in phone_data if entry["PhoneNumber"]]
        random.shuffle(phone_data)
        for phone in phone_data:
            type_elem = SubElement(phone_element, 'type')
            type_elem.text = phone["type"]
            phone_number_elem = SubElement(phone_element, 'PhoneNumber')
            phone_number_elem.text = phone["PhoneNumber"]
        root.append(phone_element)

        # Add accounts
        account_element = Element('Accounts')
        accounts = ACCOUNTS.get(employee["employeeID"], [])
        for account in accounts:
            account_type_elem = SubElement(account_element, 'type')
            account_type_elem.text = account["type"]
            account_number_elem = SubElement(account_element, 'accountNumber')
            account_number_elem.text = account["accountNumber"]
        root.append(account_element)

        # Add remaining details
        for key, value in employee.items():
            if key not in ["employeeID", "homePhone", "officePhone"]:
                child = SubElement(root, key)
                child.text = str(value) if value else "N/A"

        response = make_response(tostring(root), 200)
        response.headers['Content-Type'] = 'application/xml'
        return response

    except Exception as e:
        return make_response(f"Error processing request: {str(e)}", 500)


@app.route('/api/employment_details', methods=['POST'])
def employment_details():
    if 'SOAPAction' not in request.headers:
        return make_response(jsonify({"error": "Forbidden: Missing SOAPAction header."}), 403)

    request_data = request.get_json()
    employee_id = request_data.get('employeeID')
    if not employee_id:
        return jsonify({"error": "Missing employeeID"}), 400

    details = EMPLOYMENT_DETAILS.get(employee_id)
    if not details:
        return jsonify({"error": "Employee ID not found"}), 404

    return jsonify(details), 200


@app.route('/api/employee_list', methods=['GET'])
def employee_list():
    if 'SOAPAction' not in request.headers:
        return make_response(jsonify({"error": "Forbidden: Missing SOAPAction header."}), 403)

    query_type = request.args.get('type', 'ALL').upper()

    if query_type == 'ALL':
        employees = [
            {"employeeID": emp["employeeID"], "firstName": emp["firstName"], "lastName": emp["lastName"],
             "department": EMPLOYMENT_DETAILS[emp["employeeID"]]["departmentName"]}
            for emp in EMPLOYEE_DATA
        ]
        return jsonify({"employees": employees}), 200
    elif query_type == 'SINGLE':
        employee_id = request.args.get('employeeID')
        if not employee_id:
            return jsonify({"error": "Missing employeeID query parameter"}), 400

        employee_id = int(employee_id)
        employee = next((emp for emp in EMPLOYEE_DATA if emp["employeeID"] == employee_id), None)
        if not employee:
            return jsonify({"error": "Employee ID not found"}), 404

        return jsonify({
            "employeeID": employee["employeeID"],
            "firstName": employee["firstName"],
            "lastName": employee["lastName"],
            "department": EMPLOYMENT_DETAILS[employee_id]["departmentName"]
        }), 200

    return jsonify({"error": "Invalid type parameter. Use 'ALL' or 'SINGLE'."}), 400


# API to get employee and department details
@app.route('/api/employee_details', methods=['GET'])
def get_employee_details():
    employee_details = []

    for employee in EMPLOYEE_DATA:
        employee_id = employee["employeeID"]
        department = EMPLOYMENT_DETAILS.get(employee_id)

        if department:
            employee_details.append({
                "employeeID": employee_id,
                "departmentID": department["departmentID"],
                "employeeName": f"{employee['firstName']} {employee['lastName']}",
                "departmentName": department["departmentName"]
            })

    return jsonify(employee_details), 200

# Routes
@app.route('/')
def loginDefault():
    return render_template('login.html')

# @app.route('/login', methods=['POST'])
# def login_submit():
#     username = request.form.get('username')
#     password = request.form.get('password')
#
#     if username == USERNAME and password == PASSWORD:
#         session['session_id'] = str(uuid.uuid4())  # Generate unique session ID
#         return redirect(url_for('search'))
#     else:
#         flash('Invalid username or password')
#         return redirect(url_for('login'))


# Predefined user credentials and their allowed product categories
USERS = {
    "user1": {"password": "pass1", "products": ["TV", "Washing Machine"]},
    "user2": {"password": "pass2", "products": ["TV", "Smartwatch"]},
    "user3": {"password": "pass3", "products": ["Washing Machine", "Smartwatch", "Headphone"]},
    "user4": {"password": "pass4", "products": ["TV", "Washing Machine", "Smartwatch"]},
    "user5": {"password": "pass5", "products": ["TV", "Smartwatch", "Headphone", "Laptop"]},
    "user6": {"password": "pass6", "products": ["Washing Machine", "Laptop", "Smartwatch"]},
    "user7": {"password": "pass7", "products": ["TV", "Washing Machine", "Headphone"]},
    "user8": {"password": "pass8", "products": ["TV", "Mobile", "Headphone", "Smartphone"]},
    "user9": {"password": "pass9", "products": ["Smartwatch", "Mobile", "Washing Machine"]},
    "user10": {"password": "pass10", "products": ["TV", "Washing Machine", "Smartwatch", "Headphone", "Laptop"]},
}

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        # Authenticate user
        user = USERS.get(username)
        if user and user['password'] == password:
            session['session_id'] = str(uuid.uuid4())  # Generate unique session ID
            session['username'] = username  # Store username in session
            flash('Login successful.')
            return redirect(url_for('search'))

        flash('Invalid username or password. Please try again.')
        return redirect(url_for('login'))

    return render_template('login.html')
#
# @app.route('/search')
# def search():
#     if 'session_id' not in session:
#         flash('You need to login first.')
#         return redirect(url_for('login'))
#
#     return render_template('search.html')

@app.route('/search', methods=['GET', 'POST'])
def search():
    # Check if the user is logged in
    if 'session_id' not in session or 'username' not in session:
        flash('You need to log in first.')
        return redirect(url_for('login'))

    # Retrieve the logged-in user's allowed products
    username = session['username']
    user_products = USERS[username]['products']

    return render_template('search.html', products=user_products)

@app.route('/search_results', methods=['GET', 'POST'])
def search_results():
    # Check if the user is logged in (session ID validation)
    if 'session_id' not in session:
        flash('You need to log in first.')
        return redirect(url_for('login'))

    # Handle GET request (e.g., direct URL access)
    if request.method == 'GET':
        flash('Please perform a search first.')
        return redirect(url_for('search'))

    category = request.form.get('category')
    query = request.form.get('query').lower() if request.form.get('query') else None

    results = []
    if query:
        # Perform free text search across all categories
        for items in SEARCH_RESULTS.values():
            results.extend([item for item in items if query in item.lower()])
    elif category:
        # Retrieve items from the selected category
        results = SEARCH_RESULTS.get(category, [])

    random.shuffle(results)  # Randomize results
    return render_template('search_results.html', results=results)

@app.route('/add_to_cart', methods=['POST'])
def add_to_cart():
    if 'session_id' not in session:
        flash('You need to login first.')
        return redirect(url_for('login'))

    item = request.form.get('item')
    if 'cart' not in session:
        session['cart'] = []

    session['cart'].append(item)
    session.modified = True
    flash(f'Added {item} to cart.')
    return redirect(url_for('cart'))

@app.route('/remove_from_cart', methods=['POST'])
def remove_from_cart():
    # Check if the user is logged in (session ID validation)
    if 'session_id' not in session:
        flash('You need to login first.')
        return redirect(url_for('login'))

    # Retrieve the item to be removed from the form data
    item = request.form.get('item')

    # Check if the item exists in the cart and remove it
    if 'cart' in session and item in session['cart']:
        session['cart'].remove(item)  # Remove the item
        session.modified = True  # Mark the session as modified
        flash(f'Removed {item} from cart.')  # Optional: Add a success message

    # Redirect the user back to the cart page
    return redirect(url_for('cart'))

@app.route('/cart')
def cart():
    if 'session_id' not in session:
        flash('You need to login first.')
        return redirect(url_for('login'))

    cart_items = session.get('cart', [])
    return render_template('cart.html', cart_items=cart_items)

@app.route('/logout')
def logout():
    session.clear()
    flash('Logged out successfully.')
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
